import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class PasswordGenerator {

    private static final String LOWERCASE = "abcdefghijklmnopqrstuvwxyz";
    private static final String UPPERCASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private static final String DIGITS = "0123456789";
    private static final String SPECIAL_CHARACTERS = "!@#$%^&*()-_+=<>?/{}[]|:;,.";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Ввод длины пароля
        System.out.print("Enter password length: ");
        int length = scanner.nextInt();

        // Настройка параметров генерации пароля
        System.out.print("Include lowercase letters? (y/n): ");
        boolean includeLower = scanner.next().equalsIgnoreCase("y");

        System.out.print("Include uppercase letters? (y/n): ");
        boolean includeUpper = scanner.next().equalsIgnoreCase("y");

        System.out.print("Include digits? (y/n): ");
        boolean includeDigits = scanner.next().equalsIgnoreCase("y");

        System.out.print("Include special characters? (y/n): ");
        boolean includeSpecial = scanner.next().equalsIgnoreCase("y");

        // Генерация пароля
        String password = generatePassword(length, includeLower, includeUpper, includeDigits, includeSpecial);
        System.out.println("Generated password: " + password);
    }

    public static String generatePassword(int length, boolean includeLower, boolean includeUpper, boolean includeDigits, boolean includeSpecial) {
        StringBuilder characterSet = new StringBuilder();
        List<Character> password = new ArrayList<>();

        // Добавляем соответствующие символы в characterSet
        if (includeLower) {
            characterSet.append(LOWERCASE);
        }
        if (includeUpper) {
            characterSet.append(UPPERCASE);
        }
        if (includeDigits) {
            characterSet.append(DIGITS);
        }
        if (includeSpecial) {
            characterSet.append(SPECIAL_CHARACTERS);
        }

        // Проверка, чтобы был хотя бы один символ для генерации
        if (characterSet.length() == 0) {
            System.out.println("Error: At least one character set must be selected.");
            return "";
        }

        SecureRandom random = new SecureRandom();

        // Генерация пароля
        for (int i = 0; i < length; i++) {
            char randomChar = characterSet.charAt(random.nextInt(characterSet.length()));
            password.add(randomChar);
        }

        // Перемешиваем символы, чтобы пароль был случайным
        Collections.shuffle(password, random);

        // Собираем пароль в строку
        StringBuilder result = new StringBuilder();
        for (char c : password) {
            result.append(c);
        }

        return result.toString();
    }
}
